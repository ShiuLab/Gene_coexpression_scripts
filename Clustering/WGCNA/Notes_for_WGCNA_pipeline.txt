Codes and pipeline from Dr Kevin Childs MSU, used in this project


1. Log2 transform the expression matrix if necessary.

log_transform_GSE_matrix.pl   -i input_file -o output_file

2. Perform coefficient of variation (CV) filtering of the expression matrix.

coefficient_of_variation_filtering_simple.pl  -i input_file  -o output_file  -c cov_low_end_cutoff 

3. Examine the *chip_tree.pdf file to determine if any samples are completely incongruous with the bulk of the expression samples.  If necessary, remove the troublesome chips/samples and regenerate the expression matrix (Go back to just before step 1). 

R --slave --args CV_FILTERED_FPKM_FILE  OUTPUT_FILE_PREFIX /PATH/FOR/INPUT/AND/OUTPUT/FILES/ < wgcna_initial_sample_clustering_simple_parameters.R

4. Examine the resulting *_pick_soft_threshold_.pdf graph to determine an appropriate threshold.

R --slave --args INPUT_RDATA_FILE(XXXX-dataInput.RData) OUTPUT_FILE_PREFIX  /PATH/FOR/INPUT/AND/OUTPUT/FILES/ < systems_biology/wgcna_pick_threshold_power_simple_parameters.R

5. Examine the resulting heatmaps (*all_by_all_network_heatmap_1000_random_genes.pdf).

R --slave --args INPUT_RDATA_FILE(XXXX-threshold_data.RData)  OUTPUT_FILE_PREFIX  BETA_VALUE  TREECUT_VALUE SIGNED_OR_UNSIGNED_CORRELATION_ANALYSIS(signed or unsigned) /PATH/FOR/INPUT/AND/OUTPUT/FILES/  < wgcna_create_and_plot_modules_simple_paramemters.R

6. A directory is created and filled with module-specific files that list gene identifiers.

R --slave --args  potato_biotic_stress_fpkm_transformed_cv_0.4_10_0.7-networkConstruction-auto.RData  potato_biotic_stress_fpkm_transformed_cv_0.4_10_0.7  /data/potato/encyclopedia/  <  wgcna_extract_module_data_simple_parameters.R

7. Expression matrices for each module will have been made.  Additionally, it is sometimes nice to have gene lists with annotation.

extract_module_level_expression_data_non_rice.pl  -e expression_matrix  -d directory_with_modules.txt_files 

add_annotation_to_module_lists_not_rice.pl   -a PGSC_DM_v3.4_gene_func.txt  -d potato_biotic_stress_fpkm_transformed_cv_0.8_20_0.6/ -s module.txt

8. The module-level expression matrix files will be convereted to module-level z-score matrix files.

generate_z_scores_wrapper.pl  -d directory_with_files

9. The R script can be used to generate simple trend plots.

write_R_script_for_all_module_trend_plots.pl -d directory_with_z_score_files  -o output_R_script.R

10. This R script will actually create the trend plots for all modules from a single experimental analysis.

R CMD BATCH /path/to/R/script/output_R_script.R

11. This script creates higher quality trend plots and outputs them as pdfs which can be further manipulated in Adobe Illustrator.  The script creates four trend plots for each module.  The difference between the trend plots is whether or not they have labels on the x and/or y axes.

R --slave --args  DIRECTORY_WITH_Z_SCORE_FILES    MODULE_COLOR  NUMBER_TREATMENTS  GRAPH_WIDTH_IN_INCHES  LINE_COLOR(gray49)  EXPERIMENT_NAME  Z-LIMIT(2 or 3 or 4) NEGATIVE-Z-LIMIT(-2 or -3 or -4) TREATMENT_LABELS(in quotes, separated by semicolons) < create_trend_plots_with_various_axes.R

12. Heat maps can be created based on the eigengenes (eigenvectors), but this currently uses R in interactive mode.

library(WGCNA);
options(stringsAsFactors = FALSE);

lnames = load(file = "potato_tissues_no_callus_fpkm_transformed_cv_0.8_9_0.7-networkConstruction-auto.RData");

# By typing "lnames", you will see the component variables of lnames
lnames

# Calculate module eigengenes
# Note that "softPower" is the beta value.
MEs = moduleEigengenes(riceData, colors = moduleColors, excludeGrey = TRUE, softPower = 9, scale = FALSE)

MEs$eigengenes

ysymbols = c("black", "blue", "brown", "cyan", "green", "greenyellow", "grey60", "lightcyan", "lightgreen", "magenta", "midnightblue", "pink", "purple", "red", "salmon", "tan", "turquoise", "yellow")
xsymbols = c("Immature fruit", "Mesocarp/Endocarp", "Mature whole fruit", "Roots", "Sepals", "Carpels", "Petals", "Shoots", "Petioles", "Leaves", "Whole Flowers", "Stamens", "Tuber1", "Tuber2", "Stolons")

pdf(file="tissues_heatmap.pdf", width=10, height=10)
par(mar = c(8, 8, 3, 3) + 1);
labeledHeatmap(
	t(MEs$eigengenes),
	xLabels = xsymbols,
	yLabels = names(MEs$eigengenes),
	ySymbols = ysymbols,
	colorLabels = TRUE,
	setStdMargins = FALSE,
	cex.text = 0.5,
	xLabelsPosition = "bottom",
	xColorWidth = 0.05,
	yColorWidth = 0.05,
	colors = greenWhiteRed(100)[40:100],
	plotLegend = TRUE)
dev.off()

###########
# In this example, the order of the modules within the heatmap is altered, and the module names are changed from colors to generic labels.

library(WGCNA);
options(stringsAsFactors = FALSE);

lnames = load(file = "potato_tissues_no_callus_fpkm_transformed_cv_0.8_9_0.7-networkConstruction-auto.RData");

# Calculate module eigengenes
# Note that "softPower" is the beta value.
MEs = moduleEigengenes(riceData, colors = moduleColors, excludeGrey = TRUE, softPower = 9, scale = FALSE)

# This variable is just being formatted to be the correct dimension.
# We will immediately overwrite the data in this new matrix.
orderedMEs = MEs$eigengenes

# New-module-order = old-module-order
orderedMEs[[1]] = MEs$eigengenes[[1]]
orderedMEs[[2]] = MEs$eigengenes[[3]]
orderedMEs[[3]] = MEs$eigengenes[[8]]
orderedMEs[[4]] = MEs$eigengenes[[12]]
orderedMEs[[5]] = MEs$eigengenes[[10]]
orderedMEs[[6]] = MEs$eigengenes[[2]]
orderedMEs[[7]] = MEs$eigengenes[[4]]
orderedMEs[[8]] = MEs$eigengenes[[13]]
orderedMEs[[9]] = MEs$eigengenes[[7]]
orderedMEs[[10]] = MEs$eigengenes[[18]]
orderedMEs[[11]] = MEs$eigengenes[[16]]
orderedMEs[[12]] = MEs$eigengenes[[15]]
orderedMEs[[13]] = MEs$eigengenes[[17]]
orderedMEs[[14]] = MEs$eigengenes[[5]]
orderedMEs[[15]] = MEs$eigengenes[[11]]
orderedMEs[[16]] = MEs$eigengenes[[9]]
orderedMEs[[17]] = MEs$eigengenes[[6]]
orderedMEs[[18]] = MEs$eigengenes[[14]]

ysymbols = c("Module A1", "Module A2", "Module A3", "Module A4", "Module A5", "Module A6", "Module A7", "Module A8", "Module A9", "Module A10", "Module A11", "Module A12", "Module A13", "Module A14", "Module A15", "Module A16", "Module A17", "Module A18")
xsymbols = c("Immature fruit", "Mesocarp/Endocarp", "Mature whole fruit", "Roots", "Sepals", "Carpels", "Petals", "Shoots", "Petioles", "Leaves", "Whole Flowers", "Stamens", "Tuber1", "Tuber2", "Stolons")

pdf(file="ordered_tissues_heatmap.pdf", width=10, height=10)
par(mar = c(8, 8, 3, 3) + 1);
labeledHeatmap(
	t(orderedMEs),
	xLabels = xsymbols,
	yLabels = ysymbols,
	colorLabels = FALSE,
	setStdMargins = FALSE,
	cex.text = 0.5,
	xLabelsPosition = "bottom",
	xColorWidth = 0.05,
	yColorWidth = 0.05,
	colors = greenWhiteRed(100)[40:100],
	plotLegend = TRUE)
dev.off()





